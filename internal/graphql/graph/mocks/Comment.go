// Code generated by mockery v2.40.2. DO NOT EDIT.

package mocks

import (
	context "context"
	comments "subscriptions/internal/services/comments"

	mock "github.com/stretchr/testify/mock"

	model "subscriptions/internal/graphql/graph/model"

	postgres "subscriptions/internal/storage/postgres"
)

// Comment is an autogenerated mock type for the Comment type
type Comment struct {
	mock.Mock
}

// CheckCommentId provides a mock function with given fields: ctx, s, comtId
func (_m *Comment) CheckCommentId(ctx context.Context, s *postgres.Storage, comtId string) error {
	ret := _m.Called(ctx, s, comtId)

	if len(ret) == 0 {
		panic("no return value specified for CheckCommentId")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *postgres.Storage, string) error); ok {
		r0 = rf(ctx, s, comtId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetComments provides a mock function with given fields: ctx, s, postId, first, after
func (_m *Comment) GetComments(ctx context.Context, s *postgres.Storage, postId string, first *int32, after *string) ([]comments.Comments, string, bool, error) {
	ret := _m.Called(ctx, s, postId, first, after)

	if len(ret) == 0 {
		panic("no return value specified for GetComments")
	}

	var r0 []comments.Comments
	var r1 string
	var r2 bool
	var r3 error
	if rf, ok := ret.Get(0).(func(context.Context, *postgres.Storage, string, *int32, *string) ([]comments.Comments, string, bool, error)); ok {
		return rf(ctx, s, postId, first, after)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *postgres.Storage, string, *int32, *string) []comments.Comments); ok {
		r0 = rf(ctx, s, postId, first, after)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]comments.Comments)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *postgres.Storage, string, *int32, *string) string); ok {
		r1 = rf(ctx, s, postId, first, after)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(context.Context, *postgres.Storage, string, *int32, *string) bool); ok {
		r2 = rf(ctx, s, postId, first, after)
	} else {
		r2 = ret.Get(2).(bool)
	}

	if rf, ok := ret.Get(3).(func(context.Context, *postgres.Storage, string, *int32, *string) error); ok {
		r3 = rf(ctx, s, postId, first, after)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// SaveComment provides a mock function with given fields: ctx, s, c
func (_m *Comment) SaveComment(ctx context.Context, s *postgres.Storage, c *model.Comment) (string, error) {
	ret := _m.Called(ctx, s, c)

	if len(ret) == 0 {
		panic("no return value specified for SaveComment")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *postgres.Storage, *model.Comment) (string, error)); ok {
		return rf(ctx, s, c)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *postgres.Storage, *model.Comment) string); ok {
		r0 = rf(ctx, s, c)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *postgres.Storage, *model.Comment) error); ok {
		r1 = rf(ctx, s, c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewComment creates a new instance of Comment. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewComment(t interface {
	mock.TestingT
	Cleanup(func())
}) *Comment {
	mock := &Comment{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
